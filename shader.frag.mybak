#version 450
#extension GL_EXT_debug_printf: enable

layout (set = 0, binding = 0) uniform UBO {
    vec4 min_vert;
    vec4 max_vert;

    uint use_textures;
    float shadow_attenuation;

    float min_z;
    float max_z;
} ubo;
layout (set = 0, binding = 1) uniform sampler samp;
layout (set = 0, binding = 2) uniform texture2D textures[32];
layout (set = 0, binding = 3, rgba8) uniform image3D render_target;

layout (location = 0) in vec4 gs_pos;
layout (location = 1) in vec3 gs_normal;
layout (location = 2) in vec3 gs_color;
layout (location = 3) in vec2 gs_uv;
layout (location = 4) flat in uint gs_mat_id;
layout (location = 5) flat in int gs_swizzle;

layout (location = 0) out vec4 out_col;

const vec3 light_dir = normalize(vec3(1.0, 1.0, 1.0));

void main() {
/*
    vec4 tex_col = ubo.use_textures != 0 ? texture(sampler2D(textures[gs_mat_id], samp), gs_uv) : vec4(gs_color, 1);

    float diffuse_factor = clamp(max(dot(gs_normal, light_dir), 0.0) + (1 - ubo.shadow_attenuation), 0.0, 1.0);
    vec3 diffuse_col = vec3(1.0);
*/

    // out_col = vec4(tex_col.rgb * diffuse_col * diffuse_factor, tex_col.a);

    vec3 restored_pos;
    switch (gs_swizzle) {
        case 0: restored_pos = gs_pos.zxy; break;
        case 1: restored_pos = gs_pos.xzy; break;
        case 2: restored_pos = gs_pos.xyz; break;
    }

    out_col = vec4(0, gs_swizzle == 1, 0, 1);
    restored_pos *= 0.5;
    restored_pos += vec3(0.5);
    imageStore(render_target, ivec3(imageSize(render_target) * restored_pos), vec4(1));
}